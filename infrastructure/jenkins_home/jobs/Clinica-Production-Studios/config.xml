<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/Clinica-Production-Studios/Service</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/main</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.gradle.Gradle plugin="gradle@2.12">
      <switches></switches>
      <tasks>clean build</tasks>
      <rootBuildScriptDir></rootBuildScriptDir>
      <buildFile></buildFile>
      <gradleName>gradle-7.6.4</gradleName>
      <useWrapper>false</useWrapper>
      <makeExecutable>false</makeExecutable>
      <useWorkspaceAsHome>false</useWorkspaceAsHome>
      <wrapperLocation></wrapperLocation>
      <passAllAsSystemProperties>false</passAllAsSystemProperties>
      <projectProperties></projectProperties>
      <passAllAsProjectProperties>false</passAllAsProjectProperties>
    </hudson.plugins.gradle.Gradle>
    <hudson.tasks.Shell>
      <command>export MAJOR_VERSION=`git tag | cut -d . -f 1`
export MINOR_VERSION=`git tag | cut -d . -f 2`
export PATCH_VERSION=`git tag | cut -d . -f 3`
## Increment minor version in order to create a new one
export NEW_MINOR_VERSION=$((MINOR_VERSION + 1))
export IMAGE_VERSION=$MAJOR_VERSION.$NEW_MINOR_VERSION.$PATCH_VERSION
## Build a new image with the new version tag
#docker build -t hello-img:$IMAGE_VERSION -f /Dockerfile .

# Parse Docker credentials
DOCKER_USERNAME=&quot;${DOCKER_CREDS%%:*}&quot;
DOCKER_PASSWORD=&quot;${DOCKER_CREDS#*:}&quot;



# Having the password in clear here is not a good practice. It should be added as a secret in Jenkins and fetched from it.
docker login docker.io -u &quot;$DOCKER_USERNAME&quot; -p &quot;$DOCKER_PASSWORD&quot;
## Publish the new image to a public repository
docker push &quot;$DOCKER_USERNAME&quot;/hello-img:$IMAGE_VERSION</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@677.vdc9d38cb_254d">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordBinding>
          <credentialsId>docker_password</credentialsId>
          <variable>DOCKER_CREDS</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>